#!/usr/bin/env python3

from websockify import WebSocketProxy
from websockify import ProxyRequestHandler
from optparse import OptionParser
import logging
import urllib
import django
import sys
import os

sys.path.append(os.getcwd())   # 将项目路径添加到系统搜寻路径当中
os.environ['DJANGO_SETTINGS_MODULE'] = 'wops_backend.settings'  # 设置项目的配置文件
django.setup()  # 加载项目配置

from kvm.models import VmInstance


parser = OptionParser()

parser.add_option("-v",
                  "--verbose",
                  dest="verbose",
                  action="store_true",
                  help="Verbose mode",
                  default=False)

parser.add_option("-d",
                  "--daemon",
                  dest="daemon",
                  action="store_true",
                  help="Daemon mode",
                  default=False)

parser.add_option("-H",
                  "--host",
                  dest="host",
                  action="store",
                  help="Listen host",
                  default="0.0.0.0")

parser.add_option("-p",
                  "--port",
                  dest="port",
                  action="store",
                  help="Listen port",
                  default=6088)

parser.add_option("-c",
                  "--cert",
                  dest="cert",
                  action="store",
                  help="Certificate file path",
                  default='')

(options, args) = parser.parse_args()

FORMAT = "%(asctime)s - %(name)s - %(levelname)s : %(message)s"

if options.verbose:
    logging.basicConfig(level=logging.INFO, format=FORMAT)
else:
    logging.basicConfig(level=logging.WARNING, format=FORMAT)


class NovaProxyRequestHandler(ProxyRequestHandler):

    def new_websocket_client(self):
        """
        Called after a new WebSocket connection has been established.
        """

        parts = urllib.parse.urlsplit(self.path)
        token = urllib.parse.parse_qs(parts.query)
        vi = VmInstance.objects.get(uuid=token['token'][0])
        socket_factory = self.server.socket(vi.server.host, vi.console_port, connect=True)
        self.do_proxy(socket_factory)


if __name__ == '__main__':
    server = WebSocketProxy(RequestHandlerClass=NovaProxyRequestHandler,
                            listen_host=options.host,
                            listen_port=options.port,
                            source_is_ipv6=False,
                            verbose=options.verbose,
                            cert=options.cert,
                            key=None,
                            ssl_only=False,
                            daemon=options.daemon,
                            record=False,
                            web=False,
                            traffic=False,
                            target_host='ignore',
                            target_port='ignore',
                            wrap_mode='exit',
                            wrap_cmd=None)
    server.start_server()
